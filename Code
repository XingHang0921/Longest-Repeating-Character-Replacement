class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        char_count = {}
        most_frequency = 0
        res = 0
        l = 0
        # iniitalize set for counting char and its frequency
        for r in range(len(s)):
            char_count[s[r]] = char_count.get(s[r], 0) + 1
            # updating the count of specific char if no value set it to 0
            most_frequency = max(most_frequency, char_count[s[r]])
            # updating the max count in the set
            if(most_frequency + k < r - l + 1):  # r - l + 1: the window size, 
                                # most_frequency + k: current longest possible window
                char_count[s[l]] -= 1  # if current longest possible window is part of the window size
                l += 1      # shrink the count of left pointer char and window size
                
            res = max(res, r - l + 1)
        return res
